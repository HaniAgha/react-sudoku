{"version":3,"sources":["lib/sudoku.js","components/SudokuField.jsx","components/Timer.jsx","components/Result.jsx","components/SudokuBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["generateSudoku","fromURL","match","document","location","search","JSON","parse","atob","extractURLData","raw","generator","makepuzzle","rawSolution","solvepuzzle","formatted","map","e","result","rows","solution","startTime","Date","solvedTime","challengerStartTime","challengerSolvedTime","i","row","cols","index","j","value","col","readonly","push","SudokuField","handleChange","parseInt","target","props","onChange","field","this","className","readOnly","Component","Timer","state","elapsed","interval","setInterval","setState","Math","floor","getTime","start","parseNumber","n","Result","copyURL","preventDefault","copyText","getElementById","select","setSelectionRange","execCommand","sudoku","console","log","opponent","type","id","shareURL","href","onClick","SudokuBoard","key","App","produce","candidate","flat","length","checkSolution","data","query","btoa","stringify","replace","solveSudoku","forEach","Boolean","window","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89424e41.chunk.js","sourcesContent":["import generator from \"sudoku\";\r\n\r\n/*\r\n  Generate a sudoku with the format\r\n\r\n  {rows: [{cols: [{row: 0, col: 0, value: 1, readonly: true}, ...]}, ...]}\r\n*/\r\nexport function generateSudoku() {\r\n  const fromURL = extractURLData();\r\n  const raw = fromURL ? fromURL.raw : generator.makepuzzle();\r\n  const rawSolution = generator.solvepuzzle(raw);\r\n\r\n  const formatted = raw.map(e => (e === null ? null : e + 1));\r\n  const formattedSolution = rawSolution.map(e => e + 1);\r\n\r\n  const result = {\r\n    raw,\r\n    rows: [],\r\n    solution: formattedSolution,\r\n    startTime: new Date(),\r\n    solvedTime: null,\r\n    challengerStartTime: fromURL && new Date(fromURL.startTime),\r\n    challengerSolvedTime: fromURL && new Date(fromURL.solvedTime)\r\n  };\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    const row = { cols: [], index: i };\r\n    for (let j = 0; j < 9; j++) {\r\n      const value = formatted[9 * i + j];\r\n      const col = {\r\n        row: i,\r\n        col: j,\r\n        value,\r\n        readonly: value !== null\r\n      };\r\n      row.cols.push(col);\r\n    }\r\n    result.rows.push(row);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function checkSolution(sudoku) {\r\n  const candidate = sudoku.rows\r\n    .map(row => row.cols.map(col => col.value))\r\n    .flat();\r\n\r\n  for (let i = 0; i < candidate.length; i++) {\r\n    if (candidate[i] === null || candidate[i] !== sudoku.solution[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function shareURL(sudoku) {\r\n  const data = {\r\n    raw: sudoku.raw,\r\n    startTime: sudoku.startTime,\r\n    solvedTime: sudoku.solvedTime\r\n  };\r\n  const query = btoa(JSON.stringify(data));\r\n\r\n  return document.location.href.replace(/\\?.$/, \"\") + `?sudoku=${query}`;\r\n}\r\n\r\nfunction extractURLData() {\r\n  const match = document.location.search.match(/sudoku=([^&]+)/);\r\n  if (match) {\r\n    return JSON.parse(atob(match[1]));\r\n  }\r\n  return null;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class SudokuField extends Component {\r\n  handleChange = e => {\r\n    const value = \"\" ? null : parseInt(e.target.value);\r\n    this.props.onChange({ ...this.props.field, value });\r\n  };\r\n  render() {\r\n    const { field } = this.props;\r\n    return (\r\n      <input\r\n        className=\"field\"\r\n        value={field.value || \"\"}\r\n        readOnly={field.readonly}\r\n        onChange={this.handleChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Timer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      elapsed: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      this.setState({\r\n        elapsed: Math.floor(\r\n          (new Date().getTime() - this.props.start.getTime()) / 1000\r\n        )\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    delete this.interval;\r\n  }\r\n\r\n  render() {\r\n    const { elapsed } = this.state;\r\n    return (\r\n      <div>\r\n        <h2>\r\n          Time: {parseNumber(elapsed / 3600)} :{\" \"}\r\n          {parseNumber((elapsed % 3600) / 60)} : {parseNumber(elapsed % 60)}{\" \"}\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction parseNumber(n) {\r\n  n = parseInt(n);\r\n  return n < 10 ? `0${n}` : n;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Result extends Component {\r\n  copyURL = e => {\r\n    e.preventDefault();\r\n    let copyText = document.getElementById(\"share-url\");\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999);\r\n    document.execCommand(\"copy\");\r\n  };\r\n  render() {\r\n    const { sudoku } = this.props;\r\n    console.log(sudoku);\r\n    const elapsed = Math.floor(\r\n      (sudoku.solvedTime.getTime() - sudoku.startTime.getTime()) / 1000\r\n    );\r\n    const opponent = sudoku.challengerSolvedTime\r\n      ? Math.floor(\r\n          (sudoku.challengerSolvedTime.getTime() -\r\n            sudoku.challengerStartTime.getTime()) /\r\n            1000\r\n        )\r\n      : null;\r\n    return (\r\n      <div>\r\n        <h2 className=\"solved\">You solved the sudoku in {elapsed} seconds.</h2>\r\n        {opponent && <h3>Your opponent solved it in {opponent} seconds.</h3>}\r\n        <p>\r\n          Challenge a friend:\r\n          <input\r\n            className=\"share-url\"\r\n            type=\"text\"\r\n            id=\"share-url\"\r\n            value={sudoku.shareURL}\r\n            readOnly={true}\r\n          />\r\n          <a href=\"#\" onClick={this.copyURL}>\r\n            Copy Share Link\r\n          </a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport SudokuField from \"./SudokuField\";\r\nimport Timer from \"./Timer\";\r\nimport Result from \"./Result\";\r\n\r\nexport default class SudokuBoard extends Component {\r\n  render() {\r\n    const { sudoku, onChange } = this.props;\r\n    return (\r\n      <div>\r\n        {!sudoku.solvedTime && <Timer start={sudoku.startTime} />}\r\n        {sudoku.solvedTime && <Result sudoku={sudoku} />}\r\n        <div>\r\n          {sudoku.rows.map(row => (\r\n            <div className=\"row\" key={row.index}>\r\n              {row.cols.map(field => (\r\n                <SudokuField\r\n                  field={field}\r\n                  key={field.col}\r\n                  onChange={onChange}\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { generateSudoku, checkSolution, shareURL } from \"./lib/sudoku\";\nimport produce from \"immer\";\nimport SudokuBoard from \"./components/SudokuBoard\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = produce({}, () => ({\n      sudoku: generateSudoku()\n    }));\n  }\n\n  handleChange = e => {\n    this.setState(\n      produce(state => {\n        state.sudoku.rows[e.row].cols[e.col].value = e.value;\n        if (!state.sudoku.solvedTime) {\n          const solved = checkSolution(state.sudoku);\n          if (solved) {\n            state.sudoku.solvedTime = new Date();\n            state.sudoku.shareURL = shareURL(state.sudoku);\n          }\n        }\n      })\n    );\n  };\n\n  solveSudoku = e => {\n    this.setState(\n      produce(state => {\n        state.sudoku.rows.forEach(row =>\n          row.cols.forEach(col => {\n            if (!col.readonly) {\n              col.value = state.sudoku.solution[col.row * 9 + col.col];\n            }\n          })\n        );\n      })\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>React Sudoku</h1>\n        </header>\n        <SudokuBoard sudoku={this.state.sudoku} onChange={this.handleChange} />\n\n        <button className=\"btn btn-yellow\" onClick={this.solveSudoku}>\n          Solve it magically!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}